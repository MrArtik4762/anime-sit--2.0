import React, { useEffect, useState } from 'react';
import { initCursorErrorHandler, cleanupCursorErrorHandler } from '../utils/cursorErrorHandler';

const CursorTest: React.FC = () => {
  const [errorCount, setErrorCount] = useState(0);
  const [isHandlerActive, setIsHandlerActive] = useState(false);
  const [testResults, setTestResults] = useState<string[]>([]);

  const addTestResult = (result: string) => {
    setTestResults(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${result}`]);
  };

  const testMouseEvent = () => {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –º—ã—à–∏ —Å null target
      const event = new MouseEvent('mousemove', {
        clientX: 100,
        clientY: 100,
        bubbles: true,
        cancelable: true,
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target –≤ null –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      Object.defineProperty(event, 'target', {
        value: null,
        writable: false,
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      addTestResult('üß™ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å null target');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
      if (!event.target) {
        addTestResult('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: event.target is null - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
      } else {
        addTestResult('‚ùå –û—à–∏–±–∫–∞: event.target –Ω–µ —è–≤–ª—è–µ—Ç—Å—è null');
      }
      
    } catch (error) {
      setErrorCount(prev => prev + 1);
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error}`);
    }
  };

  const testOffsetXAccess = () => {
    try {
      addTestResult('üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ offsetX...');
      
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
      const div = document.createElement('div');
      div.style.width = '100px';
      div.style.height = '100px';
      div.style.backgroundColor = 'red';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      document.body.appendChild(div);
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      const event = new MouseEvent('mousemove', {
        clientX: 150,
        clientY: 150,
        bubbles: true,
        cancelable: true,
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target
      Object.defineProperty(event, 'target', {
        value: div,
        writable: false,
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ offsetX
      if ('offsetX' in event) {
        addTestResult(`‚úÖ offsetX –¥–æ—Å—Ç—É–ø–µ–Ω: ${event.offsetX}`);
      } else {
        addTestResult('‚ö†Ô∏è offsetX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –û—á–∏—â–∞–µ–º
      document.body.removeChild(div);
      
    } catch (error) {
      setErrorCount(prev => prev + 1);
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ offsetX: ${error}`);
    }
  };

  const toggleErrorHandler = () => {
    if (isHandlerActive) {
      cleanupCursorErrorHandler();
      addTestResult('üßπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω');
    } else {
      initCursorErrorHandler();
      addTestResult('üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫—É—Ä—Å–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω');
    }
    setIsHandlerActive(!isHandlerActive);
  };

  const simulateNavigation = () => {
    addTestResult('üîÑ –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∫—É
    cleanupCursorErrorHandler();
    addTestResult('üßπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—â–µ–Ω');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    setTimeout(() => {
      initCursorErrorHandler();
      addTestResult('üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      setIsHandlerActive(true);
    }, 1000);
  };

  const clearResults = () => {
    setTestResults([]);
    setErrorCount(0);
  };

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    addTestResult('üì± –ö–æ–º–ø–æ–Ω–µ–Ω—Ç CursorTest —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      addTestResult('üì± –ö–æ–º–ø–æ–Ω–µ–Ω—Ç CursorTest —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è');
      cleanupCursorErrorHandler();
    };
  }, []);

  return (
    <div className="p-6 bg-gray-100 dark:bg-gray-800 rounded-lg max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">
        üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫—É—Ä—Å–æ—Ä–∞
      </h2>
      
      <div className="mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
        <p className="text-sm text-gray-600 dark:text-gray-300">
          –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫—É—Ä—Å–æ—Ä–∞ 
          –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—à–∏–±–∫–∞ "Cannot read properties of null (reading 'offsetX')" 
          –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div className="space-y-2">
          <button
            onClick={testMouseEvent}
            className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
            üß™ –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —Å null target
          </button>
          
          <button
            onClick={testOffsetXAccess}
            className="w-full px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
          >
            üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ offsetX
          </button>
        </div>
        
        <div className="space-y-2">
          <button
            onClick={toggleErrorHandler}
            className={`w-full px-4 py-2 rounded transition-colors ${
              isHandlerActive 
                ? 'bg-red-500 hover:bg-red-600 text-white' 
                : 'bg-green-500 hover:bg-green-600 text-white'
            }`}
          >
            {isHandlerActive ? 'üßπ –û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫' : 'üöÄ –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫'}
          </button>
          
          <button
            onClick={simulateNavigation}
            className="w-full px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors"
          >
            üîÑ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
          </button>
        </div>
      </div>

      <div className="mb-4 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <span className={`px-3 py-1 rounded-full text-sm font-medium ${
            errorCount === 0 
              ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300'
              : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300'
          }`}>
            –û—à–∏–±–∫–∏: {errorCount}
          </span>
          
          <span className={`px-3 py-1 rounded-full text-sm font-medium ${
            isHandlerActive 
              ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300'
              : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
          }`}>
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {isHandlerActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
          </span>
        </div>
        
        <button
          onClick={clearResults}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors text-sm"
        >
          üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        </button>
      </div>

      <div className="bg-gray-50 dark:bg-gray-900/50 rounded-lg p-4 max-h-96 overflow-y-auto">
        <h3 className="font-semibold mb-2 text-gray-700 dark:text-gray-300">–õ–æ–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
        {testResults.length === 0 ? (
          <p className="text-gray-500 dark:text-gray-400 text-sm">–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        ) : (
          <div className="space-y-1">
            {testResults.map((result, index) => (
              <div 
                key={index} 
                className="text-sm font-mono p-2 rounded bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
              >
                {result}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default CursorTest;